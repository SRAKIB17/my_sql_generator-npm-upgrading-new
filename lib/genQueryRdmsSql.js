"use strict";
/**
 * Generates a SQL SELECT query string for relational database management systems (RDMS) based on the provided parameters.
 *
 * @param table_list - An object containing table names.
 * @param relation_key - An object defining table relations.
 * @param specific_column - An object defining specific columns to select.
 * @param limitSkip - An object defining limit and skip for pagination.
 * @param condition - A string defining SQL conditions.
 * @param sort - An object defining sorting criteria.
 * @param havingCondition - A string defining HAVING clause conditions.
 * @param groupBY - An array defining columns for GROUP BY clause.
 * @param min - A string defining the column to calculate minimum value.
 * @param max - A string defining the column to calculate maximum value.
 * @param count - A string defining the column to count.
 * @param sum - A string defining the column to calculate sum.
 * @returns The generated SQL SELECT query string.
 */var __rest = this && this.__rest || function (t, a) { var e = {}; for (var l in t) Object.prototype.hasOwnProperty.call(t, l) && a.indexOf(l) < 0 && (e[l] = t[l]); if (null != t && "function" == typeof Object.getOwnPropertySymbols) { var n = 0; for (l = Object.getOwnPropertySymbols(t); n < l.length; n++)a.indexOf(l[n]) < 0 && Object.prototype.propertyIsEnumerable.call(t, l[n]) && (e[l[n]] = t[l[n]]) } return e }, __spreadArray = this && this.__spreadArray || function (t, a, e) { if (e || 2 === arguments.length) for (var l, n = 0, o = a.length; n < o; n++)!l && n in a || (l || (l = Array.prototype.slice.call(a, 0, n)), l[n] = a[n]); return t.concat(l || Array.prototype.slice.call(a)) }; Object.defineProperty(exports, "__esModule", { value: !0 }); var genQueryRdmsSql = function (t) { var a, e, l, n, o = t.table_list, i = void 0 === o ? { table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "", table8: "" } : o, c = t.relation_key, r = void 0 === c ? { on: { relation: "CROSS JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" }, on1: { relation: "CROSS JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" }, on2: { relation: "INNER JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" }, on3: { relation: "LEFT JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" }, on4: { relation: "CROSS JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" }, on5: { relation: "CROSS JOIN", table1: "", table2: "", table3: "", table4: "", table5: "", table6: "", table7: "" } } : c, b = t.specific_column, u = void 0 === b ? { table1: [], table2: [], table3: [], table4: [], table5: [], table6: [], table7: [] } : b, v = t.limitSkip, s = void 0 === v ? { limit: "", skip: "" } : v, d = t.condition, p = void 0 === d ? "" : d, O = t.sort, m = t.havingCondition, f = void 0 === m ? "" : m, y = t.groupBY, _ = void 0 === y ? [] : y, S = t.min, j = void 0 === S ? "" : S, g = t.max, h = void 0 === g ? "" : g, R = t.count, I = void 0 === R ? "" : R, N = t.sum, E = void 0 === N ? "" : N, A = null === (a = Object.values(i)) || void 0 === a ? void 0 : a.length, C = null == i ? void 0 : i.table1; Object.values(u).flat().length && (n = Object.entries(u).map((function (t) { var a, e = null == t ? void 0 : t[0], l = i; return (null == l ? void 0 : l[e]) && (null === (a = null == t ? void 0 : t[1]) || void 0 === a ? void 0 : a.map((function (t) { return "".concat(l[e], ".").concat(t) }))) })).flat().join(", ")); var x, J, P = [], k = null === (l = null === (e = Object.entries(r).map((function (t) { var a, e = t[1], l = e.relation, n = __rest(e, ["relation"]), o = Object.entries(n).map((function (t) { var e = t[0], l = i; "table1" === e || (null == P ? void 0 : P.includes(l[e])) || (a = l[e], P = __spreadArray(__spreadArray([], P, !0), [a], !1)); var n = t[1]; return "".concat(l[e], ".").concat(n) })).join(" = "); return "".concat(l, " ").concat(a, " ON ").concat(o) }))) || void 0 === e ? void 0 : e.slice(0, A - 1)) || void 0 === l ? void 0 : l.join("\n"), w = null == s ? void 0 : s.limit, B = null == s ? void 0 : s.skip; w && (x = " LIMIT ".concat(B, ", ").concat(w)); var L, M, T = O || {}; Object.values(T).flat().length && (J = " ORDER BY ".concat(Object.entries(T).map((function (t) { var a = t[0], e = t[1]; return "".concat(i[a], ".").concat(e[0], " ").concat(1 == e[1] ? "ASC" : "DESC") })).toString())), (null == _ ? void 0 : _.length) && (L = " GROUP BY  ".concat(null == _ ? void 0 : _.join(","))), j ? M = " min(".concat(j, ") as minimum ") : h ? M = " max(".concat(h, ") as maximum ") : I ? M = " count(".concat(I, ") as count ") : E && (M = " sum(".concat(E, ") as summation ")); var Y = "SELECT ".concat(n || (M || "*"), " FROM ").concat(C, " ").concat(k, " ").concat(p ? "WHERE " + p : ""); return Y += "".concat(L || "", " ").concat(f ? " HAVING " + f : "").concat(J || "").concat(x || "") }; exports.default = genQueryRdmsSql;